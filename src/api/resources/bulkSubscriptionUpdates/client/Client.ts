/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Beehiiv from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace BulkSubscriptionUpdates {
    export interface Options {
        environment?: core.Supplier<environments.BeehiivEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class BulkSubscriptionUpdates {
    protected readonly _options: BulkSubscriptionUpdates.Options;

    constructor(_options: BulkSubscriptionUpdates.Options) {
        this._options = _options;
    }

    /**
     * Returns a list of Subscription Update objects for a publication.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {BulkSubscriptionUpdates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.bulkSubscriptionUpdates.index("publicationId")
     */
    public index(
        publicationId: Beehiiv.PublicationId,
        requestOptions?: BulkSubscriptionUpdates.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.BulkSubscriptionUpdatesListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__index(publicationId, requestOptions));
    }

    private async __index(
        publicationId: Beehiiv.PublicationId,
        requestOptions?: BulkSubscriptionUpdates.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.BulkSubscriptionUpdatesListResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/bulk_subscription_updates`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Beehiiv.BulkSubscriptionUpdatesListResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/bulk_subscription_updates.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a single Subscription Update object for a publication.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {string} id - The ID of the Subscription Update object
     * @param {BulkSubscriptionUpdates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.bulkSubscriptionUpdates.show("publicationId", "id")
     */
    public show(
        publicationId: Beehiiv.PublicationId,
        id: string,
        requestOptions?: BulkSubscriptionUpdates.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.BulkSubscriptionUpdatesGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__show(publicationId, id, requestOptions));
    }

    private async __show(
        publicationId: Beehiiv.PublicationId,
        id: string,
        requestOptions?: BulkSubscriptionUpdates.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.BulkSubscriptionUpdatesGetResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/bulk_subscription_updates/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Beehiiv.BulkSubscriptionUpdatesGetResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/bulk_subscription_updates/{id}.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Bulk update multiple subscriptions fields, including status, custom fields, and tiers.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.BulkSubscriptionsPutRequest} request
     * @param {BulkSubscriptionUpdates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.bulkSubscriptionUpdates.put("publicationId", {
     *         subscriptions: [{
     *                 subscription_id: "sub_1234-5678-9012-3456-7890",
     *                 tier: "premium",
     *                 stripe_customer_id: "cus_1234567890",
     *                 unsubscribe: false,
     *                 custom_fields: [{
     *                         name: "custom_field_name",
     *                         value: "custom_field_value"
     *                     }, {
     *                         name: "custom_field_name_2",
     *                         value: "custom_field_value_2"
     *                     }]
     *             }, {
     *                 subscription_id: "sub_9876-5432-1098-7654-3210",
     *                 tier: "free",
     *                 stripe_customer_id: "cus_1234567890",
     *                 unsubscribe: true,
     *                 custom_fields: [{
     *                         name: "custom_field_name_3",
     *                         value: "custom_field_value_3"
     *                     }, {
     *                         name: "custom_field_name_4",
     *                         value: "custom_field_value_4"
     *                     }]
     *             }]
     *     })
     */
    public put(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.BulkSubscriptionsPutRequest = {},
        requestOptions?: BulkSubscriptionUpdates.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.SubscriptionsPatchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__put(publicationId, request, requestOptions));
    }

    private async __put(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.BulkSubscriptionsPutRequest = {},
        requestOptions?: BulkSubscriptionUpdates.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.SubscriptionsPatchResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions/bulk_actions`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.SubscriptionsPatchResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling PUT /publications/{publicationId}/subscriptions/bulk_actions.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Bulk update multiple subscriptions fields, including status, custom fields, and tiers.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.BulkSubscriptionsPatchRequest} request
     * @param {BulkSubscriptionUpdates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.bulkSubscriptionUpdates.patch("publicationId", {
     *         subscriptions: [{
     *                 subscription_id: "sub_1234-5678-9012-3456-7890",
     *                 tier: "premium",
     *                 stripe_customer_id: "cus_1234567890",
     *                 unsubscribe: false,
     *                 custom_fields: [{
     *                         name: "custom_field_name",
     *                         value: "custom_field_value"
     *                     }, {
     *                         name: "custom_field_name_2",
     *                         value: "custom_field_value_2"
     *                     }]
     *             }, {
     *                 subscription_id: "sub_9876-5432-1098-7654-3210",
     *                 tier: "free",
     *                 stripe_customer_id: "cus_1234567890",
     *                 unsubscribe: true,
     *                 custom_fields: [{
     *                         name: "custom_field_name_3",
     *                         value: "custom_field_value_3"
     *                     }, {
     *                         name: "custom_field_name_4",
     *                         value: "custom_field_value_4"
     *                     }]
     *             }]
     *     })
     */
    public patch(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.BulkSubscriptionsPatchRequest = {},
        requestOptions?: BulkSubscriptionUpdates.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.SubscriptionsPatchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__patch(publicationId, request, requestOptions));
    }

    private async __patch(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.BulkSubscriptionsPatchRequest = {},
        requestOptions?: BulkSubscriptionUpdates.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.SubscriptionsPatchResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions/bulk_actions`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.SubscriptionsPatchResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling PATCH /publications/{publicationId}/subscriptions/bulk_actions.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Bulk update subscriptions' status.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.BulkSubscriptionsStatusPutRequest} request
     * @param {BulkSubscriptionUpdates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bulkSubscriptionUpdates.putStatus("publicationId", {
     *         subscription_ids: ["sub_1234-5678-9012-3456-7890", "sub_9876-5432-1098-7654-3210"],
     *         new_status: "active"
     *     })
     */
    public putStatus(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.BulkSubscriptionsStatusPutRequest,
        requestOptions?: BulkSubscriptionUpdates.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__putStatus(publicationId, request, requestOptions));
    }

    private async __putStatus(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.BulkSubscriptionsStatusPutRequest,
        requestOptions?: BulkSubscriptionUpdates.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BeehiivError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling PUT /publications/{publicationId}/subscriptions.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Bulk update subscriptions' status.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.BulkSubscriptionsStatusPatchRequest} request
     * @param {BulkSubscriptionUpdates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bulkSubscriptionUpdates.patchStatus("publicationId", {
     *         subscription_ids: ["sub_1234-5678-9012-3456-7890", "sub_9876-5432-1098-7654-3210"],
     *         new_status: "active"
     *     })
     */
    public patchStatus(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.BulkSubscriptionsStatusPatchRequest,
        requestOptions?: BulkSubscriptionUpdates.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__patchStatus(publicationId, request, requestOptions));
    }

    private async __patchStatus(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.BulkSubscriptionsStatusPatchRequest,
        requestOptions?: BulkSubscriptionUpdates.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BeehiivError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling PATCH /publications/{publicationId}/subscriptions.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
