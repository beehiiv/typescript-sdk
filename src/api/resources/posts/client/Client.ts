/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Beehiiv from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import { toJson } from "../../../../core/json.js";

export declare namespace Posts {
    export interface Options {
        environment?: core.Supplier<environments.BeehiivEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Posts {
    protected readonly _options: Posts.Options;

    constructor(_options: Posts.Options) {
        this._options = _options;
    }

    /**
     * <Note title="Currently in beta" icon="b">
     *   This feature is currently in beta, the API is subject to change, and available only to Enterprise users.<br/><br/>To inquire about Enterprise pricing,
     *   please visit our <a href="https://www.beehiiv.com/enterprise">Enterprise page</a>.
     * </Note>
     * Create a post for a specific publication.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.PostsCreateRequest} request
     * @param {Posts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.UnauthorizedError}
     * @throws {@link Beehiiv.ForbiddenError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.posts.create("pub_00000000-0000-0000-0000-000000000000", {
     *         title: "The Kitchen Sink Post (refactored version)",
     *         subtitle: "Contains lots of examples of each block type and the various settings you could use",
     *         blocks: [{
     *                 type: "heading",
     *                 level: "2",
     *                 textAlignment: "center",
     *                 text: "This is my block!!!",
     *                 anchorHeader: false,
     *                 anchorIncludeInToc: false
     *             }, {
     *                 type: "list",
     *                 listType: "ordered",
     *                 items: ["a", "b", "c"]
     *             }, {
     *                 type: "list",
     *                 listType: "ordered",
     *                 items: ["d", "e", "f"],
     *                 startNumber: 4
     *             }, {
     *                 type: "list",
     *                 listType: "unordered",
     *                 items: ["g", "h", "i"],
     *                 startNumber: 4
     *             }, {
     *                 type: "table",
     *                 headerRow: true,
     *                 headerColumn: true,
     *                 rows: [[{
     *                             text: "A"
     *                         }, {
     *                             text: "B",
     *                             alignment: "center"
     *                         }, {
     *                             text: "C",
     *                             alignment: "right"
     *                         }], [{
     *                             text: "D",
     *                             alignment: "right"
     *                         }, {
     *                             text: "E",
     *                             alignment: "center"
     *                         }, {
     *                             text: "F",
     *                             alignment: "left"
     *                         }]]
     *             }, {
     *                 type: "table",
     *                 rows: [[{
     *                             text: "A"
     *                         }, {
     *                             text: "B"
     *                         }, {
     *                             text: "C"
     *                         }], [{
     *                             text: "D"
     *                         }, {
     *                             text: "E"
     *                         }, {
     *                             text: "F"
     *                         }]]
     *             }, {
     *                 type: "table",
     *                 headerRow: false,
     *                 rows: [[{
     *                             text: "A"
     *                         }, {
     *                             text: "B"
     *                         }, {
     *                             text: "C"
     *                         }], [{
     *                             text: "D"
     *                         }, {
     *                             text: "E"
     *                         }, {
     *                             text: "F"
     *                         }]]
     *             }, {
     *                 type: "columns",
     *                 columns: [{
     *                         blocks: [{
     *                                 type: "paragraph",
     *                                 plaintext: "Marble Column 1 {{email}}"
     *                             }]
     *                     }, {
     *                         blocks: [{
     *                                 type: "image",
     *                                 imageUrl: "https://cdn.britannica.com/89/164789-050-D6B5E2C7/Barack-Obama-2012.jpg",
     *                                 url: "https://www.whitehouse.gov/",
     *                                 title: "Barry O",
     *                                 alt_text: "A picture of Barry Obama",
     *                                 caption: "One Cool President",
     *                                 captionAlignment: "center",
     *                                 imageAlignment: "right",
     *                                 width: 75
     *                             }]
     *                     }]
     *             }, {
     *                 type: "advertisement",
     *                 opportunity_id: "d8dfa6be-24b5-4cad-8350-ae44366dbd4c"
     *             }, {
     *                 type: "image",
     *                 imageUrl: "https://cdn.britannica.com/89/164789-050-D6B5E2C7/Barack-Obama-2012.jpg",
     *                 url: "https://www.whitehouse.gov/",
     *                 title: "Barry O",
     *                 alt_text: "A picture of Barry Obama",
     *                 caption: "One Cool President",
     *                 captionAlignment: "center",
     *                 imageAlignment: "right",
     *                 width: 75
     *             }, {
     *                 type: "paragraph",
     *                 formattedText: [{
     *                         text: "This is going to be "
     *                     }, {
     *                         text: "a really, really awesome time ",
     *                         styling: ["bold"]
     *                     }, {
     *                         text: "Are you ready for this?",
     *                         styling: ["italic", "bold"]
     *                     }]
     *             }, {
     *                 type: "button",
     *                 href: "/subscribe",
     *                 target: "_blank",
     *                 alignment: "center",
     *                 size: "large",
     *                 text: "Subscribe"
     *             }, {
     *                 type: "button",
     *                 href: "/signup",
     *                 target: "_blank",
     *                 alignment: "right",
     *                 size: "small",
     *                 text: "Sign Up"
     *             }, {
     *                 type: "button",
     *                 href: "/",
     *                 target: "_blank",
     *                 text: "View Posts"
     *             }, {
     *                 type: "heading",
     *                 level: "4",
     *                 textAlignment: "right",
     *                 text: "This is my block!!!",
     *                 anchorHeader: true,
     *                 anchorIncludeInToc: true
     *             }],
     *         post_template_id: "post_template_00000000-0000-0000-0000-000000000000",
     *         scheduled_at: "2024-12-25T12:00:00Z",
     *         custom_link_tracking_enabled: true,
     *         email_capture_type_override: "none",
     *         override_scheduled_at: "2022-10-26T14:01:16Z",
     *         social_share: "comments_and_likes_only",
     *         thumbnail_image_url: "https://images.squarespace-cdn.com/content/v1/56e4ca0540261d39b90e4b18/1605047208324-PONGEYKEAKTMM1LANHJ5/1ED706BF-A70B-4F26-B3D5-266B449DDA8A_1_105_c.jpeg",
     *         email_settings: {
     *             from_address: "from_address",
     *             custom_live_url: "https://beehiiv.com",
     *             display_title_in_email: true,
     *             display_byline_in_email: true,
     *             display_subtitle_in_email: true,
     *             email_header_engagement_buttons: "email_header_engagement_buttons",
     *             email_header_social_share: "email_header_social_share",
     *             email_preview_text: "email_preview_text",
     *             email_subject_line: "email_subject_line"
     *         },
     *         web_settings: {
     *             display_thumbnail_on_web: true,
     *             hide_from_feed: true,
     *             slug: "and-this-is-gonna-rock"
     *         },
     *         seo_settings: {
     *             default_description: "default_description",
     *             default_title: "default_title",
     *             og_description: "OpenGraph description",
     *             og_title: "Opengraph Title",
     *             twitter_description: "Twitter Stuff",
     *             twitter_title: "My Twitter Article"
     *         },
     *         content_tags: ["Obama", "Care", "Rocks", "Healthcare"],
     *         recipients: {
     *             web: {
     *                 tier_ids: ["premium"]
     *             },
     *             email: {
     *                 tier_ids: ["premium", "free"],
     *                 include_segment_ids: ["seg_6426b403-39f5-42bd-86e9-9533fb0099e7"],
     *                 exclude_segment_ids: ["seg_e34b4085-aef6-449f-a699-7563f915f852"]
     *             }
     *         }
     *     })
     */
    public create(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostsCreateRequest,
        requestOptions?: Posts.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.PostsCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(publicationId, request, requestOptions));
    }

    private async __create(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostsCreateRequest,
        requestOptions?: Posts.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.PostsCreateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/posts`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.PostsCreateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 401:
                    throw new Beehiiv.UnauthorizedError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 403:
                    throw new Beehiiv.ForbiddenError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling POST /publications/{publicationId}/posts.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve all posts belonging to a specific publication
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.PostsListRequest} request
     * @param {Posts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.posts.index("pub_00000000-0000-0000-0000-000000000000")
     */
    public index(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostsListRequest = {},
        requestOptions?: Posts.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.PostsListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__index(publicationId, request, requestOptions));
    }

    private async __index(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostsListRequest = {},
        requestOptions?: Posts.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.PostsListResponse>> {
        const {
            expand,
            audience,
            platform,
            status,
            "content_tags[]": contentTags,
            limit,
            page,
            order_by: orderBy,
            direction,
            hidden_from_feed: hiddenFromFeed,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => toJson(item));
            } else {
                _queryParams["expand"] = toJson(expand);
            }
        }

        if (audience != null) {
            _queryParams["audience"] = audience;
        }

        if (platform != null) {
            _queryParams["platform"] = platform;
        }

        if (status != null) {
            _queryParams["status"] = status;
        }

        if (contentTags != null) {
            _queryParams["content_tags[]"] = toJson(contentTags);
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (orderBy != null) {
            _queryParams["order_by"] = orderBy;
        }

        if (direction != null) {
            _queryParams["direction"] = direction;
        }

        if (hiddenFromFeed != null) {
            _queryParams["hidden_from_feed"] = hiddenFromFeed;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/posts`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.PostsListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/posts.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve aggregate stats for all posts
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.PostsAggregateStatsRequest} request
     * @param {Posts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.posts.aggregateStats("pub_00000000-0000-0000-0000-000000000000")
     */
    public aggregateStats(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostsAggregateStatsRequest = {},
        requestOptions?: Posts.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.PostsAggregateStatsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__aggregateStats(publicationId, request, requestOptions));
    }

    private async __aggregateStats(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostsAggregateStatsRequest = {},
        requestOptions?: Posts.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.PostsAggregateStatsResponse>> {
        const { audience, platform, status, "content_tags[]": contentTags, hidden_from_feed: hiddenFromFeed } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (audience != null) {
            _queryParams["audience"] = audience;
        }

        if (platform != null) {
            _queryParams["platform"] = platform;
        }

        if (status != null) {
            _queryParams["status"] = status;
        }

        if (contentTags != null) {
            _queryParams["content_tags[]"] = toJson(contentTags);
        }

        if (hiddenFromFeed != null) {
            _queryParams["hidden_from_feed"] = hiddenFromFeed;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/posts/aggregate_stats`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.PostsAggregateStatsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/posts/aggregate_stats.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retreive a single Post belonging to a specific publication
     *
     * @param {Beehiiv.PostId} postId - The prefixed ID of the post object
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.PostsGetRequest} request
     * @param {Posts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.posts.show("post_00000000-0000-0000-0000-000000000000", "pub_00000000-0000-0000-0000-000000000000")
     */
    public show(
        postId: Beehiiv.PostId,
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostsGetRequest = {},
        requestOptions?: Posts.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.PostsGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__show(postId, publicationId, request, requestOptions));
    }

    private async __show(
        postId: Beehiiv.PostId,
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostsGetRequest = {},
        requestOptions?: Posts.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.PostsGetResponse>> {
        const { expand } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => toJson(item));
            } else {
                _queryParams["expand"] = toJson(expand);
            }
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/posts/${encodeURIComponent(postId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.PostsGetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/posts/{postId}.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete or Archive a post. Any post that has been confirmed will have it's status changed to `archived`. Posts in the `draft` status will be permenantly deleted.
     *
     * @param {Beehiiv.PostId} postId - The prefixed ID of the post object
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Posts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.posts.delete("post_00000000-0000-0000-0000-000000000000", "pub_00000000-0000-0000-0000-000000000000")
     */
    public delete(
        postId: Beehiiv.PostId,
        publicationId: Beehiiv.PublicationId,
        requestOptions?: Posts.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.PostsDeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(postId, publicationId, requestOptions));
    }

    private async __delete(
        postId: Beehiiv.PostId,
        publicationId: Beehiiv.PublicationId,
        requestOptions?: Posts.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.PostsDeleteResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/posts/${encodeURIComponent(postId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.PostsDeleteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling DELETE /publications/{publicationId}/posts/{postId}.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
