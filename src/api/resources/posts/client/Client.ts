/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Beehiiv from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Posts {
    interface Options {
        environment?: core.Supplier<environments.BeehiivEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class Posts {
    constructor(protected readonly _options: Posts.Options) {}

    /**
     * <Note title="Currently in beta" icon="b">
     *   This feature is currently in beta, the API is subject to change, and available only to Enterprise users.<br/><br/>To inquire about Enterprise pricing,
     *   please visit our <a href="https://www.beehiiv.com/enterprise">Enterprise page</a>.
     * </Note>
     * Create a post for a specific publication.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.PostsCreateRequest} request
     * @param {Posts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.posts.create("pub_00000000-0000-0000-0000-000000000000", {
     *         title: "The Kitchen Sink Post (refactored version)",
     *         subtitle: "Contains lots of examples of each block type and the various settings you could use",
     *         blocks: [{
     *                 type: "heading",
     *                 level: "2",
     *                 textAlignment: "center",
     *                 text: "This is my block!!!",
     *                 anchorHeader: false,
     *                 anchorIncludeInToc: false
     *             }, {
     *                 type: "list",
     *                 listType: "ordered",
     *                 items: ["a", "b", "c"]
     *             }, {
     *                 type: "list",
     *                 listType: "ordered",
     *                 items: ["d", "e", "f"],
     *                 startNumber: 4
     *             }, {
     *                 type: "list",
     *                 listType: "unordered",
     *                 items: ["g", "h", "i"],
     *                 startNumber: 4
     *             }, {
     *                 type: "table",
     *                 headerRow: true,
     *                 headerColumn: true,
     *                 rows: [[{
     *                             text: "A"
     *                         }, {
     *                             text: "B",
     *                             alignment: "center"
     *                         }, {
     *                             text: "C",
     *                             alignment: "right"
     *                         }], [{
     *                             text: "D",
     *                             alignment: "right"
     *                         }, {
     *                             text: "E",
     *                             alignment: "center"
     *                         }, {
     *                             text: "F",
     *                             alignment: "left"
     *                         }]]
     *             }, {
     *                 type: "table",
     *                 rows: [[{
     *                             text: "A"
     *                         }, {
     *                             text: "B"
     *                         }, {
     *                             text: "C"
     *                         }], [{
     *                             text: "D"
     *                         }, {
     *                             text: "E"
     *                         }, {
     *                             text: "F"
     *                         }]]
     *             }, {
     *                 type: "table",
     *                 headerRow: false,
     *                 rows: [[{
     *                             text: "A"
     *                         }, {
     *                             text: "B"
     *                         }, {
     *                             text: "C"
     *                         }], [{
     *                             text: "D"
     *                         }, {
     *                             text: "E"
     *                         }, {
     *                             text: "F"
     *                         }]]
     *             }, {
     *                 type: "columns",
     *                 columns: [{
     *                         blocks: [{
     *                                 type: "paragraph",
     *                                 plaintext: "Marble Column 1 {{email}}"
     *                             }]
     *                     }, {
     *                         blocks: [{
     *                                 type: "image",
     *                                 imageUrl: "https://cdn.britannica.com/89/164789-050-D6B5E2C7/Barack-Obama-2012.jpg",
     *                                 url: "https://www.whitehouse.gov/",
     *                                 title: "Barry O",
     *                                 altText: "A picture of Barry Obama",
     *                                 caption: "One Cool President",
     *                                 captionAlignment: "center",
     *                                 imageAlignment: "right",
     *                                 width: 75
     *                             }]
     *                     }]
     *             }, {
     *                 type: "advertisement",
     *                 opportunityId: "d8dfa6be-24b5-4cad-8350-ae44366dbd4c"
     *             }, {
     *                 type: "image",
     *                 imageUrl: "https://cdn.britannica.com/89/164789-050-D6B5E2C7/Barack-Obama-2012.jpg",
     *                 url: "https://www.whitehouse.gov/",
     *                 title: "Barry O",
     *                 altText: "A picture of Barry Obama",
     *                 caption: "One Cool President",
     *                 captionAlignment: "center",
     *                 imageAlignment: "right",
     *                 width: 75
     *             }, {
     *                 type: "paragraph",
     *                 formattedText: [{
     *                         text: "This is going to be "
     *                     }, {
     *                         text: "a really, really awesome time ",
     *                         styling: ["bold"]
     *                     }, {
     *                         text: "Are you ready for this?",
     *                         styling: ["italic", "bold"]
     *                     }]
     *             }, {
     *                 type: "button",
     *                 href: "/subscribe",
     *                 target: "_blank",
     *                 alignment: "center",
     *                 size: "large",
     *                 text: "Subscribe"
     *             }, {
     *                 type: "button",
     *                 href: "/signup",
     *                 target: "_blank",
     *                 alignment: "right",
     *                 size: "small",
     *                 text: "Sign Up"
     *             }, {
     *                 type: "button",
     *                 href: "/",
     *                 target: "_blank",
     *                 text: "View Posts"
     *             }, {
     *                 type: "heading",
     *                 level: "4",
     *                 textAlignment: "right",
     *                 text: "This is my block!!!",
     *                 anchorHeader: true,
     *                 anchorIncludeInToc: true
     *             }],
     *         postTemplateId: "post_template_00000000-0000-0000-0000-000000000000",
     *         scheduledAt: "2024-12-25T12:00:00Z",
     *         customLinkTrackingEnabled: true,
     *         emailCaptureTypeOverride: "none",
     *         overrideScheduledAt: "2022-10-26T14:01:16Z",
     *         socialShare: "comments_and_likes_only",
     *         thumbnailImageUrl: "https://images.squarespace-cdn.com/content/v1/56e4ca0540261d39b90e4b18/1605047208324-PONGEYKEAKTMM1LANHJ5/1ED706BF-A70B-4F26-B3D5-266B449DDA8A_1_105_c.jpeg",
     *         emailSettings: {
     *             fromAddress: "from_address",
     *             customLiveUrl: "https://beehiiv.com",
     *             displayTitleInEmail: true,
     *             displayBylineInEmail: true,
     *             displaySubtitleInEmail: true,
     *             emailHeaderEngagementButtons: "email_header_engagement_buttons",
     *             emailHeaderSocialShare: "email_header_social_share",
     *             emailPreviewText: "email_preview_text",
     *             emailSubjectLine: "email_subject_line"
     *         },
     *         webSettings: {
     *             displayThumbnailOnWeb: true,
     *             hideFromFeed: true,
     *             slug: "and-this-is-gonna-rock"
     *         },
     *         seoSettings: {
     *             defaultDescription: "default_description",
     *             defaultTitle: "default_title",
     *             ogDescription: "OpenGraph description",
     *             ogTitle: "Opengraph Title",
     *             twitterDescription: "Twitter Stuff",
     *             twitterTitle: "My Twitter Article"
     *         },
     *         contentTags: ["Obama", "Care", "Rocks", "Healthcare"],
     *         recipients: {
     *             web: {
     *                 tierIds: ["premium"]
     *             },
     *             email: {
     *                 tierIds: ["premium", "free"],
     *                 includeSegmentIds: ["seg_6426b403-39f5-42bd-86e9-9533fb0099e7"],
     *                 excludeSegmentIds: ["seg_e34b4085-aef6-449f-a699-7563f915f852"]
     *             }
     *         }
     *     })
     */
    public async create(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostsCreateRequest,
        requestOptions?: Posts.RequestOptions
    ): Promise<Beehiiv.PostsCreateResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(serializers.PublicationId.jsonOrThrow(publicationId))}/posts`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@beehiiv/sdk",
                "X-Fern-SDK-Version": "0.1.6",
                "User-Agent": "@beehiiv/sdk/0.1.6",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.PostsCreateRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.PostsCreateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Beehiiv.NotFoundError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError();
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieve all posts belonging to a specific publication
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.PostsListRequest} request
     * @param {Posts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.posts.index("pub_00000000-0000-0000-0000-000000000000")
     */
    public async index(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostsListRequest = {},
        requestOptions?: Posts.RequestOptions
    ): Promise<Beehiiv.PostsListResponse> {
        const { expand, audience, platform, status, contentTags, limit, page, orderBy, direction, hiddenFromFeed } =
            request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => JSON.stringify(item));
            } else {
                _queryParams["expand"] = JSON.stringify(expand);
            }
        }

        if (audience != null) {
            _queryParams["audience"] = audience;
        }

        if (platform != null) {
            _queryParams["platform"] = platform;
        }

        if (status != null) {
            _queryParams["status"] = status;
        }

        if (contentTags != null) {
            _queryParams["content_tags[]"] = JSON.stringify(contentTags);
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (orderBy != null) {
            _queryParams["order_by"] = orderBy;
        }

        if (direction != null) {
            _queryParams["direction"] = direction;
        }

        if (hiddenFromFeed != null) {
            _queryParams["hidden_from_feed"] = hiddenFromFeed;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(serializers.PublicationId.jsonOrThrow(publicationId))}/posts`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@beehiiv/sdk",
                "X-Fern-SDK-Version": "0.1.6",
                "User-Agent": "@beehiiv/sdk/0.1.6",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.PostsListResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Beehiiv.NotFoundError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError();
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retreive a single Post belonging to a specific publication
     *
     * @param {Beehiiv.PostId} postId - The prefixed ID of the post object
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.PostsGetRequest} request
     * @param {Posts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.posts.show("post_00000000-0000-0000-0000-000000000000", "pub_00000000-0000-0000-0000-000000000000")
     */
    public async show(
        postId: Beehiiv.PostId,
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostsGetRequest = {},
        requestOptions?: Posts.RequestOptions
    ): Promise<Beehiiv.PostsGetResponse> {
        const { expand } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => JSON.stringify(item));
            } else {
                _queryParams["expand"] = JSON.stringify(expand);
            }
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(
                    serializers.PublicationId.jsonOrThrow(publicationId)
                )}/posts/${encodeURIComponent(serializers.PostId.jsonOrThrow(postId))}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@beehiiv/sdk",
                "X-Fern-SDK-Version": "0.1.6",
                "User-Agent": "@beehiiv/sdk/0.1.6",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.PostsGetResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Beehiiv.NotFoundError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError();
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete or Archive a post. Any post that has been confirmed will have it's status changed to `archived`. Posts in the `draft` status will be permenantly deleted.
     *
     * @param {Beehiiv.PostId} postId - The prefixed ID of the post object
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Posts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.posts.delete("post_00000000-0000-0000-0000-000000000000", "pub_00000000-0000-0000-0000-000000000000")
     */
    public async delete(
        postId: Beehiiv.PostId,
        publicationId: Beehiiv.PublicationId,
        requestOptions?: Posts.RequestOptions
    ): Promise<Beehiiv.PostsDeleteResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(
                    serializers.PublicationId.jsonOrThrow(publicationId)
                )}/posts/${encodeURIComponent(serializers.PostId.jsonOrThrow(postId))}`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@beehiiv/sdk",
                "X-Fern-SDK-Version": "0.1.6",
                "User-Agent": "@beehiiv/sdk/0.1.6",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.PostsDeleteResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Beehiiv.NotFoundError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError();
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
