/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as beehiiv from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Posts {
    interface Options {
        environment?: core.Supplier<environments.beehiivEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class Posts {
    constructor(protected readonly _options: Posts.Options) {}

    /**
     * Retrieve all posts belonging to a specific publication
     * @throws {@link beehiiv.BadRequestError}
     * @throws {@link beehiiv.NotFoundError}
     * @throws {@link beehiiv.TooManyRequestsError}
     * @throws {@link beehiiv.InternalServerError}
     *
     * @example
     *     await beehiiv.posts.getPosts("pub_00000000-0000-0000-0000-000000000000")
     *
     * @example
     *     await beehiiv.posts.getPosts("string", {
     *         expand: beehiiv.PostsGetPostsRequestExpandItem.Stats,
     *         audience: beehiiv.PostsGetPostsRequestAudience.Free,
     *         platform: beehiiv.PostsGetPostsRequestPlatform.Web,
     *         status: beehiiv.PostsGetPostsRequestStatus.Draft,
     *         contentTags: "string",
     *         limit: 1,
     *         page: 1,
     *         orderBy: beehiiv.PostsGetPostsRequestOrderBy.Created,
     *         direction: beehiiv.PostsGetPostsRequestDirection.Asc,
     *         hiddenFromFeed: beehiiv.PostsGetPostsRequestHiddenFromFeed.All
     *     })
     */
    public async getPosts(
        publicationId: string,
        request: beehiiv.PostsGetPostsRequest = {},
        requestOptions?: Posts.RequestOptions
    ): Promise<beehiiv.PostsGetPostsResponse> {
        const { expand, audience, platform, status, contentTags, limit, page, orderBy, direction, hiddenFromFeed } =
            request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand[]"] = expand.map((item) => item);
            } else {
                _queryParams["expand[]"] = expand;
            }
        }

        if (audience != null) {
            _queryParams["audience"] = audience;
        }

        if (platform != null) {
            _queryParams["platform"] = platform;
        }

        if (status != null) {
            _queryParams["status"] = status;
        }

        if (contentTags != null) {
            if (Array.isArray(contentTags)) {
                _queryParams["content_tags[]"] = contentTags.map((item) => item);
            } else {
                _queryParams["content_tags[]"] = contentTags;
            }
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (orderBy != null) {
            _queryParams["order_by"] = orderBy;
        }

        if (direction != null) {
            _queryParams["direction"] = direction;
        }

        if (hiddenFromFeed != null) {
            _queryParams["hidden_from_feed"] = hiddenFromFeed;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.beehiivEnvironment.Default,
                `publications/${publicationId}/posts`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.PostsGetPostsResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new beehiiv.BadRequestError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new beehiiv.NotFoundError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new beehiiv.TooManyRequestsError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new beehiiv.InternalServerError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.beehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.beehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.beehiivTimeoutError();
            case "unknown":
                throw new errors.beehiivError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retreive a single Post belonging to a specific publication
     * @throws {@link beehiiv.BadRequestError}
     * @throws {@link beehiiv.NotFoundError}
     * @throws {@link beehiiv.TooManyRequestsError}
     * @throws {@link beehiiv.InternalServerError}
     *
     * @example
     *     await beehiiv.posts.getPostsPostId("post_00000000-0000-0000-0000-000000000000", "pub_00000000-0000-0000-0000-000000000000")
     *
     * @example
     *     await beehiiv.posts.getPostsPostId("string", "string", {
     *         expand: beehiiv.PostsGetPostsPostIdRequestExpandItem.Stats
     *     })
     */
    public async getPostsPostId(
        postId: string,
        publicationId: string,
        request: beehiiv.PostsGetPostsPostIdRequest = {},
        requestOptions?: Posts.RequestOptions
    ): Promise<beehiiv.PostsGetPostsPostIdResponse> {
        const { expand } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand[]"] = expand.map((item) => item);
            } else {
                _queryParams["expand[]"] = expand;
            }
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.beehiivEnvironment.Default,
                `publications/${publicationId}/posts/${postId}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.PostsGetPostsPostIdResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new beehiiv.BadRequestError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new beehiiv.NotFoundError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new beehiiv.TooManyRequestsError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new beehiiv.InternalServerError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.beehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.beehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.beehiivTimeoutError();
            case "unknown":
                throw new errors.beehiivError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete or Archive a post. Any post that has been confirmed will have it's status changed to `archived`. Posts in the `draft` status will be permenantly deleted.
     * @throws {@link beehiiv.BadRequestError}
     * @throws {@link beehiiv.NotFoundError}
     * @throws {@link beehiiv.TooManyRequestsError}
     * @throws {@link beehiiv.InternalServerError}
     *
     * @example
     *     await beehiiv.posts.deletePostsPostId("post_00000000-0000-0000-0000-000000000000", "pub_00000000-0000-0000-0000-000000000000")
     *
     * @example
     *     await beehiiv.posts.deletePostsPostId("string", "string")
     */
    public async deletePostsPostId(
        postId: string,
        publicationId: string,
        requestOptions?: Posts.RequestOptions
    ): Promise<beehiiv.PostsDeletePostsPostIdResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.beehiivEnvironment.Default,
                `publications/${publicationId}/posts/${postId}`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.PostsDeletePostsPostIdResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new beehiiv.BadRequestError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new beehiiv.NotFoundError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new beehiiv.TooManyRequestsError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new beehiiv.InternalServerError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.beehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.beehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.beehiivTimeoutError();
            case "unknown":
                throw new errors.beehiivError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader() {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
