/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as beehiiv from "../../..";
import * as serializers from "../../../../serialization";
import urlJoin from "url-join";
import * as errors from "../../../../errors";

export declare namespace SubscriptionTags {
    interface Options {
        environment?: core.Supplier<environments.beehiivEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class SubscriptionTags {
    constructor(protected readonly _options: SubscriptionTags.Options) {}

    /**
     * Create new subscription tags for a subscription. If the tag does not exist on the publication, it will be created automatically.
     * @throws {@link beehiiv.BadRequestError}
     * @throws {@link beehiiv.NotFoundError}
     * @throws {@link beehiiv.TooManyRequestsError}
     * @throws {@link beehiiv.InternalServerError}
     *
     * @example
     *     await beehiiv.subscriptionTags.postPublicationsPublicationIdSubscriptionsSubscriptionIdTags("publicationId", "subscriptionId", {
     *         tags: ["Premium"]
     *     })
     *
     * @example
     *     await beehiiv.subscriptionTags.postPublicationsPublicationIdSubscriptionsSubscriptionIdTags("string", "string", {
     *         tags: ["Premium"]
     *     })
     */
    public async postPublicationsPublicationIdSubscriptionsSubscriptionIdTags(
        publicationId: string,
        subscriptionId: string,
        request: beehiiv.SubscriptionTagsPostPublicationsPublicationIdSubscriptionsSubscriptionIdTagsRequest = {},
        requestOptions?: SubscriptionTags.RequestOptions
    ): Promise<beehiiv.SubscriptionTagsPostPublicationsPublicationIdSubscriptionsSubscriptionIdTagsResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.beehiivEnvironment.Default,
                `publications/${publicationId}/subscriptions/${subscriptionId}/tags`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: await serializers.SubscriptionTagsPostPublicationsPublicationIdSubscriptionsSubscriptionIdTagsRequest.jsonOrThrow(
                request,
                { unrecognizedObjectKeys: "strip" }
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.SubscriptionTagsPostPublicationsPublicationIdSubscriptionsSubscriptionIdTagsResponse.parseOrThrow(
                _response.body,
                {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new beehiiv.BadRequestError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new beehiiv.NotFoundError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new beehiiv.TooManyRequestsError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new beehiiv.InternalServerError(
                        await serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.beehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.beehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.beehiivTimeoutError();
            case "unknown":
                throw new errors.beehiivError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader() {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
