/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Beehiiv from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Subscriptions {
    export interface Options {
        environment?: core.Supplier<environments.BeehiivEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Subscriptions {
    protected readonly _options: Subscriptions.Options;

    constructor(_options: Subscriptions.Options) {
        this._options = _options;
    }

    /**
     * Create new subscriptions for a publication.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.SubscriptionRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.subscriptions.create("pub_00000000-0000-0000-0000-000000000000", {
     *         email: "bruce.wayne@wayneenterprise.com",
     *         reactivate_existing: false,
     *         send_welcome_email: false,
     *         utm_source: "WayneEnterprise",
     *         utm_medium: "organic",
     *         utm_campaign: "fall_2022_promotion",
     *         referring_site: "www.wayneenterprise.com/blog",
     *         custom_fields: [{
     *                 name: "First Name",
     *                 value: "Bruce"
     *             }, {
     *                 name: "Last Name",
     *                 value: "Wayne"
     *             }],
     *         stripe_customer_id: "cus_12345abcde"
     *     })
     */
    public create(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.SubscriptionRequest,
        requestOptions?: Subscriptions.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.SubscriptionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(publicationId, request, requestOptions));
    }

    private async __create(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.SubscriptionRequest,
        requestOptions?: Subscriptions.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.SubscriptionResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.SubscriptionResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling POST /publications/{publicationId}/subscriptions.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve all subscriptions belonging to a specific publication.
     * <Info> **New**: This endpoint now supports cursor-based pagination for better performance and consistency. Use the `cursor` parameter instead of `page` for new integrations. </Info>
     * <Warning> **Deprecation Notice**: Offset-based pagination (using `page` parameter) is deprecated and limited to 100 pages maximum. Please migrate to cursor-based pagination. See our [Pagination Guide](/welcome/pagination) for details. </Warning>
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.SubscriptionsListRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.subscriptions.index("pub_00000000-0000-0000-0000-000000000000", {
     *         limit: 10
     *     })
     *
     * @example
     *     await client.subscriptions.index("pub_00000000-0000-0000-0000-000000000000", {
     *         limit: 10,
     *         cursor: "eyJ0aW1lc3RhbXAiOiIyMDI0LTA3LTAyVDE3OjMwOjAwLjAwMDAwMFoifQ=="
     *     })
     *
     * @example
     *     await client.subscriptions.index("pub_00000000-0000-0000-0000-000000000000", {
     *         email: "clark@dailyplanet.com",
     *         page: 1,
     *         limit: 10
     *     })
     */
    public index(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.SubscriptionsListRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.SubscriptionsListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__index(publicationId, request, requestOptions));
    }

    private async __index(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.SubscriptionsListRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.SubscriptionsListResponse>> {
        const {
            "expand[]": expand,
            status,
            tier,
            "premium_tiers[]": premiumTiers,
            "premium_tier_ids[]": premiumTierIds,
            limit,
            cursor,
            page,
            email,
            order_by: orderBy,
            direction,
            creation_date: creationDate,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand[]"] = expand.map((item) => item);
            } else {
                _queryParams["expand[]"] = expand;
            }
        }

        if (status != null) {
            _queryParams["status"] = status;
        }

        if (tier != null) {
            _queryParams["tier"] = tier;
        }

        if (premiumTiers != null) {
            if (Array.isArray(premiumTiers)) {
                _queryParams["premium_tiers[]"] = premiumTiers.map((item) => item);
            } else {
                _queryParams["premium_tiers[]"] = premiumTiers;
            }
        }

        if (premiumTierIds != null) {
            if (Array.isArray(premiumTierIds)) {
                _queryParams["premium_tier_ids[]"] = premiumTierIds.map((item) => item);
            } else {
                _queryParams["premium_tier_ids[]"] = premiumTierIds;
            }
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (email != null) {
            _queryParams["email"] = email;
        }

        if (orderBy != null) {
            _queryParams["order_by"] = orderBy;
        }

        if (direction != null) {
            _queryParams["direction"] = direction;
        }

        if (creationDate != null) {
            _queryParams["creation_date"] = creationDate;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.SubscriptionsListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/subscriptions.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * <Info>Please note that this endpoint requires the email to be URL encoded. Please reference your language's documentation for the correct method of encoding.</Info> Retrieve a single subscription belonging to a specific email address in a specific publication.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {string} email - The ID of the subscriber object
     * @param {Beehiiv.SubscriptionsGetRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.subscriptions.getByEmail("pub_00000000-0000-0000-0000-000000000000", "work@example.com")
     */
    public getByEmail(
        publicationId: Beehiiv.PublicationId,
        email: string,
        request: Beehiiv.SubscriptionsGetRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.SubscriptionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getByEmail(publicationId, email, request, requestOptions));
    }

    private async __getByEmail(
        publicationId: Beehiiv.PublicationId,
        email: string,
        request: Beehiiv.SubscriptionsGetRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.SubscriptionResponse>> {
        const { "expand[]": expand } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand[]"] = expand.map((item) => item);
            } else {
                _queryParams["expand[]"] = expand;
            }
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions/by_email/${encodeURIComponent(email)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.SubscriptionResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/subscriptions/by_email/{email}.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * <Info>In previous versions of the API, another endpoint existed to retrieve a subscription by the subscriber ID. This endpoint is now deprecated and will be removed in a future version of the API. Please use this endpoint instead. The subscription ID can be found by exporting a list of subscriptions either via the `Settings > Publications > Export Data` or by exporting a CSV in a segment.</Info> Retrieve a single subscription belonging to a specific publication.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.SubscriptionId} subscriptionId - The prefixed ID of the subscription object
     * @param {Beehiiv.SubscriptionsGetByIdRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.subscriptions.getById("pub_00000000-0000-0000-0000-000000000000", "sub_00000000-0000-0000-0000-000000000000")
     */
    public getById(
        publicationId: Beehiiv.PublicationId,
        subscriptionId: Beehiiv.SubscriptionId,
        request: Beehiiv.SubscriptionsGetByIdRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.SubscriptionResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__getById(publicationId, subscriptionId, request, requestOptions),
        );
    }

    private async __getById(
        publicationId: Beehiiv.PublicationId,
        subscriptionId: Beehiiv.SubscriptionId,
        request: Beehiiv.SubscriptionsGetByIdRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.SubscriptionResponse>> {
        const { "expand[]": expand } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand[]"] = expand.map((item) => item);
            } else {
                _queryParams["expand[]"] = expand;
            }
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions/${encodeURIComponent(subscriptionId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.SubscriptionResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/subscriptions/{subscriptionId}.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a single subscription belonging to a specific publication via the subscriber ID.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {string} subscriberId - The ID of the subscriber object
     * @param {Beehiiv.SubscriptionsGetBySubscriberIdRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.subscriptions.getBySubscriberId("pub_00000000-0000-0000-0000-000000000000", "00000000-0000-0000-0000-000000000000")
     */
    public getBySubscriberId(
        publicationId: Beehiiv.PublicationId,
        subscriberId: string,
        request: Beehiiv.SubscriptionsGetBySubscriberIdRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.SubscriptionResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__getBySubscriberId(publicationId, subscriberId, request, requestOptions),
        );
    }

    private async __getBySubscriberId(
        publicationId: Beehiiv.PublicationId,
        subscriberId: string,
        request: Beehiiv.SubscriptionsGetBySubscriberIdRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.SubscriptionResponse>> {
        const { "expand[]": expand } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand[]"] = expand.map((item) => item);
            } else {
                _queryParams["expand[]"] = expand;
            }
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions/by_subscriber_id/${encodeURIComponent(subscriberId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.SubscriptionResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/subscriptions/by_subscriber_id/{subscriberId}.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Generate a JWT token that can be used to automatically log in subscribers via URL. This token is short lived and should be used immediately.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.SubscriptionId} subscriptionId - The prefixed ID of the subscription object
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.subscriptions.getJwtToken("pub_00000000-0000-0000-0000-000000000000", "sub_00000000-0000-0000-0000-000000000000")
     */
    public getJwtToken(
        publicationId: Beehiiv.PublicationId,
        subscriptionId: Beehiiv.SubscriptionId,
        requestOptions?: Subscriptions.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.SubscriptionJwtTokenResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getJwtToken(publicationId, subscriptionId, requestOptions));
    }

    private async __getJwtToken(
        publicationId: Beehiiv.PublicationId,
        subscriptionId: Beehiiv.SubscriptionId,
        requestOptions?: Subscriptions.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.SubscriptionJwtTokenResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions/${encodeURIComponent(subscriptionId)}/jwt_token`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.SubscriptionJwtTokenResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/subscriptions/{subscriptionId}/jwt_token.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update a single subscription.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.SubscriptionId} subscriptionId - The prefixed ID of the subscription object
     * @param {Beehiiv.SubscriptionsUpdateRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.subscriptions.put("pub_00000000-0000-0000-0000-000000000000", "sub_00000000-0000-0000-0000-000000000000", {
     *         tier: "premium",
     *         stripe_customer_id: "cus_12345abcde",
     *         custom_fields: [{
     *                 name: "First Name",
     *                 value: "Bruce"
     *             }, {
     *                 name: "Last Name",
     *                 value: "Wayne"
     *             }]
     *     })
     */
    public put(
        publicationId: Beehiiv.PublicationId,
        subscriptionId: Beehiiv.SubscriptionId,
        request: Beehiiv.SubscriptionsUpdateRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.SubscriptionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__put(publicationId, subscriptionId, request, requestOptions));
    }

    private async __put(
        publicationId: Beehiiv.PublicationId,
        subscriptionId: Beehiiv.SubscriptionId,
        request: Beehiiv.SubscriptionsUpdateRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.SubscriptionResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions/${encodeURIComponent(subscriptionId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.SubscriptionResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling PUT /publications/{publicationId}/subscriptions/{subscriptionId}.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update a single subscription.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.SubscriptionId} subscriptionId - The prefixed ID of the subscription object
     * @param {Beehiiv.SubscriptionsPatchSingleRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.subscriptions.patch("pub_00000000-0000-0000-0000-000000000000", "sub_00000000-0000-0000-0000-000000000000", {
     *         tier: "premium",
     *         stripe_customer_id: "cus_12345abcde",
     *         custom_fields: [{
     *                 name: "First Name",
     *                 value: "Bruce"
     *             }, {
     *                 name: "Last Name",
     *                 value: "Wayne"
     *             }]
     *     })
     */
    public patch(
        publicationId: Beehiiv.PublicationId,
        subscriptionId: Beehiiv.SubscriptionId,
        request: Beehiiv.SubscriptionsPatchSingleRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.SubscriptionResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__patch(publicationId, subscriptionId, request, requestOptions),
        );
    }

    private async __patch(
        publicationId: Beehiiv.PublicationId,
        subscriptionId: Beehiiv.SubscriptionId,
        request: Beehiiv.SubscriptionsPatchSingleRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.SubscriptionResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions/${encodeURIComponent(subscriptionId)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.SubscriptionResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling PATCH /publications/{publicationId}/subscriptions/{subscriptionId}.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update a single subscription by email.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {string} email - The email of the subscription object
     * @param {Beehiiv.SubscriptionsUpdateByEmailRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.subscriptions.updateByEmail("pub_00000000-0000-0000-0000-000000000000", "example@example.com", {
     *         tier: "premium",
     *         stripe_customer_id: "cus_12345abcde",
     *         custom_fields: [{
     *                 name: "First Name",
     *                 value: "Bruce"
     *             }, {
     *                 name: "Last Name",
     *                 value: "Wayne"
     *             }]
     *     })
     */
    public updateByEmail(
        publicationId: Beehiiv.PublicationId,
        email: string,
        request: Beehiiv.SubscriptionsUpdateByEmailRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.SubscriptionResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__updateByEmail(publicationId, email, request, requestOptions),
        );
    }

    private async __updateByEmail(
        publicationId: Beehiiv.PublicationId,
        email: string,
        request: Beehiiv.SubscriptionsUpdateByEmailRequest = {},
        requestOptions?: Subscriptions.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.SubscriptionResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions/by_email/${encodeURIComponent(email)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.SubscriptionResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling PUT /publications/{publicationId}/subscriptions/by_email/{email}.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * <Warning>This cannot be undone. All data associated with the subscription will also be deleted. We recommend unsubscribing when possible instead of deleting.<br><br>If a premium subscription is deleted they will no longer be billed.</Warning> Deletes a subscription.
     *
     * @param {Beehiiv.SubscriptionId} subscriptionId - The prefixed ID of the subscription object
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.subscriptions.delete("sub_00000000-0000-0000-0000-000000000000", "pub_00000000-0000-0000-0000-000000000000")
     */
    public delete(
        subscriptionId: Beehiiv.SubscriptionId,
        publicationId: Beehiiv.PublicationId,
        requestOptions?: Subscriptions.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.SubscriptionDeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(subscriptionId, publicationId, requestOptions));
    }

    private async __delete(
        subscriptionId: Beehiiv.SubscriptionId,
        publicationId: Beehiiv.PublicationId,
        requestOptions?: Subscriptions.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.SubscriptionDeleteResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/subscriptions/${encodeURIComponent(subscriptionId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.SubscriptionDeleteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling DELETE /publications/{publicationId}/subscriptions/{subscriptionId}.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
