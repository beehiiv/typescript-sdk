/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Beehiiv from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Webhooks {
    export interface Options {
        environment?: core.Supplier<environments.BeehiivEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Webhooks {
    protected readonly _options: Webhooks.Options;

    constructor(_options: Webhooks.Options) {
        this._options = _options;
    }

    /**
     * Create a new webhook for a given publication.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.PostWebhooksRequest} request
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.webhooks.create("pub_00000000-0000-0000-0000-000000000000", {
     *         url: "https://example.com/webhook",
     *         event_types: ["post.sent"]
     *     })
     */
    public create(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostWebhooksRequest,
        requestOptions?: Webhooks.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.WebhookResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(publicationId, request, requestOptions));
    }

    private async __create(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.PostWebhooksRequest,
        requestOptions?: Webhooks.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.WebhookResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/webhooks`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.WebhookResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling POST /publications/{publicationId}/webhooks.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve all webhooks belonging to a specific publication.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.GetWebhooksRequest} request
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.webhooks.index("pub_00000000-0000-0000-0000-000000000000")
     */
    public index(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.GetWebhooksRequest = {},
        requestOptions?: Webhooks.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.IndexWebhooksResponse> {
        return core.HttpResponsePromise.fromPromise(this.__index(publicationId, request, requestOptions));
    }

    private async __index(
        publicationId: Beehiiv.PublicationId,
        request: Beehiiv.GetWebhooksRequest = {},
        requestOptions?: Webhooks.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.IndexWebhooksResponse>> {
        const { limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/webhooks`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.IndexWebhooksResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/webhooks.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a specific webhook belonging to a publication.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.EndpointId} endpointId - The prefixed ID of the webhook object
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.UnprocessableEntityError}
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.webhooks.show("pub_00000000-0000-0000-0000-000000000000", "ep_0000000000000000000000000000")
     */
    public show(
        publicationId: Beehiiv.PublicationId,
        endpointId: Beehiiv.EndpointId,
        requestOptions?: Webhooks.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.WebhookResponse> {
        return core.HttpResponsePromise.fromPromise(this.__show(publicationId, endpointId, requestOptions));
    }

    private async __show(
        publicationId: Beehiiv.PublicationId,
        endpointId: Beehiiv.EndpointId,
        requestOptions?: Webhooks.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.WebhookResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/webhooks/${encodeURIComponent(endpointId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.WebhookResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Beehiiv.UnprocessableEntityError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/webhooks/{endpointId}.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a webhook subscription from a publication.
     *
     * @param {Beehiiv.PublicationId} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.EndpointId} endpointId - The prefixed ID of the webhook object
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.NotFoundError}
     * @throws {@link Beehiiv.TooManyRequestsError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.webhooks.delete("pub_00000000-0000-0000-0000-000000000000", "ep_0000000000000000000000000000")
     */
    public delete(
        publicationId: Beehiiv.PublicationId,
        endpointId: Beehiiv.EndpointId,
        requestOptions?: Webhooks.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.WebhooksDeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(publicationId, endpointId, requestOptions));
    }

    private async __delete(
        publicationId: Beehiiv.PublicationId,
        endpointId: Beehiiv.EndpointId,
        requestOptions?: Webhooks.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.WebhooksDeleteResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/webhooks/${encodeURIComponent(endpointId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Beehiiv.WebhooksDeleteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 404:
                    throw new Beehiiv.NotFoundError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 429:
                    throw new Beehiiv.TooManyRequestsError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling DELETE /publications/{publicationId}/webhooks/{endpointId}.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Send test info to an already set up webhook endpoint.
     *
     * @param {string} publicationId - The prefixed ID of the publication object
     * @param {Beehiiv.EndpointId} endpointId - The prefixed ID of the webhook object
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Beehiiv.BadRequestError}
     * @throws {@link Beehiiv.InternalServerError}
     *
     * @example
     *     await client.webhooks.test("pub_00000000-0000-0000-0000-000000000000", "ep_0000000000000000000000000000")
     */
    public test(
        publicationId: string,
        endpointId: Beehiiv.EndpointId,
        requestOptions?: Webhooks.RequestOptions,
    ): core.HttpResponsePromise<Beehiiv.GetPublicationsPublicationIdWebhooksWebhookIdTestsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__test(publicationId, endpointId, requestOptions));
    }

    private async __test(
        publicationId: string,
        endpointId: Beehiiv.EndpointId,
        requestOptions?: Webhooks.RequestOptions,
    ): Promise<core.WithRawResponse<Beehiiv.GetPublicationsPublicationIdWebhooksWebhookIdTestsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BeehiivEnvironment.Default,
                `publications/${encodeURIComponent(publicationId)}/webhooks/${encodeURIComponent(endpointId)}/tests`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Beehiiv.GetPublicationsPublicationIdWebhooksWebhookIdTestsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Beehiiv.BadRequestError(_response.error.body as Beehiiv.Error_, _response.rawResponse);
                case 500:
                    throw new Beehiiv.InternalServerError(
                        _response.error.body as Beehiiv.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BeehiivError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BeehiivError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BeehiivTimeoutError(
                    "Timeout exceeded when calling GET /publications/{publicationId}/webhooks/{endpointId}/tests.",
                );
            case "unknown":
                throw new errors.BeehiivError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
