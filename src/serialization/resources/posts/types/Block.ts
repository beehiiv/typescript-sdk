/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Beehiiv from "../../../../api/index";
import * as core from "../../../../core";
import { ParagraphBlock } from "./ParagraphBlock";
import { ImageBlock } from "./ImageBlock";
import { ButtonBlock } from "./ButtonBlock";
import { HeaderBlock } from "./HeaderBlock";
import { RssBlock } from "./RssBlock";
import { AdvertisementBlock } from "./AdvertisementBlock";
import { ColumnsBlock } from "./ColumnsBlock";
import { ListBlock } from "./ListBlock";
import { TableBlock } from "./TableBlock";
import { HtmlBlock } from "./HtmlBlock";
import { EmbedLinkBlock } from "./EmbedLinkBlock";

export const Block: core.serialization.Schema<serializers.Block.Raw, Beehiiv.Block> = core.serialization
    .union("type", {
        paragraph: ParagraphBlock,
        image: ImageBlock,
        button: ButtonBlock,
        heading: HeaderBlock,
        rss: RssBlock,
        advertisement: AdvertisementBlock,
        columns: ColumnsBlock,
        list: ListBlock,
        table: TableBlock,
        html: HtmlBlock,
        embed_link: EmbedLinkBlock,
    })
    .transform<Beehiiv.Block>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace Block {
    type Raw =
        | Block.Paragraph
        | Block.Image
        | Block.Button
        | Block.Heading
        | Block.Rss
        | Block.Advertisement
        | Block.Columns
        | Block.List
        | Block.Table
        | Block.Html
        | Block.EmbedLink;

    interface Paragraph extends ParagraphBlock.Raw {
        type: "paragraph";
    }

    interface Image extends ImageBlock.Raw {
        type: "image";
    }

    interface Button extends ButtonBlock.Raw {
        type: "button";
    }

    interface Heading extends HeaderBlock.Raw {
        type: "heading";
    }

    interface Rss extends RssBlock.Raw {
        type: "rss";
    }

    interface Advertisement extends AdvertisementBlock.Raw {
        type: "advertisement";
    }

    interface Columns extends ColumnsBlock.Raw {
        type: "columns";
    }

    interface List extends ListBlock.Raw {
        type: "list";
    }

    interface Table extends TableBlock.Raw {
        type: "table";
    }

    interface Html extends HtmlBlock.Raw {
        type: "html";
    }

    interface EmbedLink extends EmbedLinkBlock.Raw {
        type: "embed_link";
    }
}
