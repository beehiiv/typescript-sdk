/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Beehiiv from "../../../../api/index";
import * as core from "../../../../core";
import { ParagraphBlock } from "./ParagraphBlock";
import { ImageBlock } from "./ImageBlock";
import { ButtonBlock } from "./ButtonBlock";
import { HeaderBlock } from "./HeaderBlock";
import { RssBlock } from "./RssBlock";
import { AdvertisementBlock } from "./AdvertisementBlock";

export const EmbeddableBlocks: core.serialization.Schema<serializers.EmbeddableBlocks.Raw, Beehiiv.EmbeddableBlocks> =
    core.serialization
        .union("type", {
            paragraph: ParagraphBlock,
            image: ImageBlock,
            button: ButtonBlock,
            heading: HeaderBlock,
            rss: RssBlock,
            advertisement: AdvertisementBlock,
        })
        .transform<Beehiiv.EmbeddableBlocks>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace EmbeddableBlocks {
    type Raw =
        | EmbeddableBlocks.Paragraph
        | EmbeddableBlocks.Image
        | EmbeddableBlocks.Button
        | EmbeddableBlocks.Heading
        | EmbeddableBlocks.Rss
        | EmbeddableBlocks.Advertisement;

    interface Paragraph extends ParagraphBlock.Raw {
        type: "paragraph";
    }

    interface Image extends ImageBlock.Raw {
        type: "image";
    }

    interface Button extends ButtonBlock.Raw {
        type: "button";
    }

    interface Heading extends HeaderBlock.Raw {
        type: "heading";
    }

    interface Rss extends RssBlock.Raw {
        type: "rss";
    }

    interface Advertisement extends AdvertisementBlock.Raw {
        type: "advertisement";
    }
}
