/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BeehiivClient } from "../../src/Client";

describe("AutomationJourneys", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "test@example.com", double_opt_override: "on" };
        const rawResponseBody = {
            data: {
                id: "aj_00000000-0000-0000-0000-000000000000",
                automation_id: "aut_00000000-0000-0000-0000-000000000000",
                subscription_id: "sub_00000000-0000-0000-0000-000000000000",
                email: "test@example.com",
                status: "initiated",
                started_at: 1714857600,
                completed_at: 1714861200,
            },
        };
        server
            .mockEndpoint()
            .post(
                "/publications/pub_00000000-0000-0000-0000-000000000000/automations/aut_00000000-0000-0000-0000-000000000000/journeys",
            )
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.automationJourneys.create(
            "pub_00000000-0000-0000-0000-000000000000",
            "aut_00000000-0000-0000-0000-000000000000",
            {
                email: "test@example.com",
                double_opt_override: "on",
            },
        );
        expect(response).toEqual({
            data: {
                id: "aj_00000000-0000-0000-0000-000000000000",
                automation_id: "aut_00000000-0000-0000-0000-000000000000",
                subscription_id: "sub_00000000-0000-0000-0000-000000000000",
                email: "test@example.com",
                status: "initiated",
                started_at: 1714857600,
                completed_at: 1714861200,
            },
        });
    });

    test("index", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "aj_00000000-0000-0000-0000-000000000000",
                    automation_id: "aut_00000000-0000-0000-0000-000000000000",
                    subscription_id: "sub_00000000-0000-0000-0000-000000000000",
                    email: "test@example.com",
                    status: "initiated",
                    started_at: 1714857600,
                    completed_at: 1714861200,
                },
                {
                    id: "aj_00000000-0000-0000-0000-000000000000",
                    automation_id: "aut_00000000-0000-0000-0000-000000000000",
                    subscription_id: "sub_00000000-0000-0000-0000-000000000000",
                    email: "test@example.com",
                    status: "initiated",
                    started_at: 1714857600,
                    completed_at: 1714861200,
                },
            ],
            limit: 10,
            page: 1,
            total_results: 2,
            total_pages: 1,
        };
        server
            .mockEndpoint()
            .get(
                "/publications/pub_00000000-0000-0000-0000-000000000000/automations/aut_00000000-0000-0000-0000-000000000000/journeys",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.automationJourneys.index(
            "pub_00000000-0000-0000-0000-000000000000",
            "aut_00000000-0000-0000-0000-000000000000",
        );
        expect(response).toEqual({
            data: [
                {
                    id: "aj_00000000-0000-0000-0000-000000000000",
                    automation_id: "aut_00000000-0000-0000-0000-000000000000",
                    subscription_id: "sub_00000000-0000-0000-0000-000000000000",
                    email: "test@example.com",
                    status: "initiated",
                    started_at: 1714857600,
                    completed_at: 1714861200,
                },
                {
                    id: "aj_00000000-0000-0000-0000-000000000000",
                    automation_id: "aut_00000000-0000-0000-0000-000000000000",
                    subscription_id: "sub_00000000-0000-0000-0000-000000000000",
                    email: "test@example.com",
                    status: "initiated",
                    started_at: 1714857600,
                    completed_at: 1714861200,
                },
            ],
            limit: 10,
            page: 1,
            total_results: 2,
            total_pages: 1,
        });
    });

    test("show", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "aj_00000000-0000-0000-0000-000000000000",
                automation_id: "aut_00000000-0000-0000-0000-000000000000",
                subscription_id: "sub_00000000-0000-0000-0000-000000000000",
                email: "test@example.com",
                status: "initiated",
                started_at: 1714857600,
                completed_at: 1714861200,
            },
        };
        server
            .mockEndpoint()
            .get(
                "/publications/pub_00000000-0000-0000-0000-000000000000/automations/aut_00000000-0000-0000-0000-000000000000/journeys/aj_00000000-0000-0000-0000-000000000000",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.automationJourneys.show(
            "pub_00000000-0000-0000-0000-000000000000",
            "aut_00000000-0000-0000-0000-000000000000",
            "aj_00000000-0000-0000-0000-000000000000",
        );
        expect(response).toEqual({
            data: {
                id: "aj_00000000-0000-0000-0000-000000000000",
                automation_id: "aut_00000000-0000-0000-0000-000000000000",
                subscription_id: "sub_00000000-0000-0000-0000-000000000000",
                email: "test@example.com",
                status: "initiated",
                started_at: 1714857600,
                completed_at: 1714861200,
            },
        });
    });
});
