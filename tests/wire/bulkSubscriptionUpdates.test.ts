/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BeehiivClient } from "../../src/Client";

describe("BulkSubscriptionUpdates", () => {
    test("index", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    type: "status",
                    params: "params",
                    status: "pending",
                    publication_id: "publication_id",
                    failure_reason: "failure_reason",
                    completed: 1,
                    created: 1,
                    updated: 1,
                    error_log: ["error_log"],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/publications/publicationId/bulk_subscription_updates")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bulkSubscriptionUpdates.index("publicationId");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    type: "status",
                    params: "params",
                    status: "pending",
                    publication_id: "publication_id",
                    failure_reason: "failure_reason",
                    completed: 1,
                    created: 1,
                    updated: 1,
                    error_log: ["error_log"],
                },
            ],
        });
    });

    test("show", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                type: "bulk",
                params: "params",
                status: "pending",
                publication_id: "publication_id",
                failure_reason: "failure_reason",
                completed: 1,
                created: 1,
                updated: 1,
                error_log: ["error_log"],
            },
        };
        server
            .mockEndpoint()
            .get("/publications/publicationId/bulk_subscription_updates/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bulkSubscriptionUpdates.show("publicationId", "id");
        expect(response).toEqual({
            data: {
                id: "id",
                type: "bulk",
                params: "params",
                status: "pending",
                publication_id: "publication_id",
                failure_reason: "failure_reason",
                completed: 1,
                created: 1,
                updated: 1,
                error_log: ["error_log"],
            },
        });
    });

    test("put", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            subscriptions: [
                {
                    subscription_id: "sub_1234-5678-9012-3456-7890",
                    tier: "premium",
                    stripe_customer_id: "cus_1234567890",
                    unsubscribe: false,
                    custom_fields: [
                        { name: "custom_field_name", value: "custom_field_value" },
                        { name: "custom_field_name_2", value: "custom_field_value_2" },
                    ],
                },
                {
                    subscription_id: "sub_9876-5432-1098-7654-3210",
                    tier: "free",
                    stripe_customer_id: "cus_1234567890",
                    unsubscribe: true,
                    custom_fields: [
                        { name: "custom_field_name_3", value: "custom_field_value_3" },
                        { name: "custom_field_name_4", value: "custom_field_value_4" },
                    ],
                },
            ],
        };
        const rawResponseBody = { data: { subscription_update_id: "subscription_update_id" } };
        server
            .mockEndpoint()
            .put("/publications/publicationId/subscriptions/bulk_actions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bulkSubscriptionUpdates.put("publicationId", {
            subscriptions: [
                {
                    subscription_id: "sub_1234-5678-9012-3456-7890",
                    tier: "premium",
                    stripe_customer_id: "cus_1234567890",
                    unsubscribe: false,
                    custom_fields: [
                        {
                            name: "custom_field_name",
                            value: "custom_field_value",
                        },
                        {
                            name: "custom_field_name_2",
                            value: "custom_field_value_2",
                        },
                    ],
                },
                {
                    subscription_id: "sub_9876-5432-1098-7654-3210",
                    tier: "free",
                    stripe_customer_id: "cus_1234567890",
                    unsubscribe: true,
                    custom_fields: [
                        {
                            name: "custom_field_name_3",
                            value: "custom_field_value_3",
                        },
                        {
                            name: "custom_field_name_4",
                            value: "custom_field_value_4",
                        },
                    ],
                },
            ],
        });
        expect(response).toEqual({
            data: {
                subscription_update_id: "subscription_update_id",
            },
        });
    });

    test("patch", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            subscriptions: [
                {
                    subscription_id: "sub_1234-5678-9012-3456-7890",
                    tier: "premium",
                    stripe_customer_id: "cus_1234567890",
                    unsubscribe: false,
                    custom_fields: [
                        { name: "custom_field_name", value: "custom_field_value" },
                        { name: "custom_field_name_2", value: "custom_field_value_2" },
                    ],
                },
                {
                    subscription_id: "sub_9876-5432-1098-7654-3210",
                    tier: "free",
                    stripe_customer_id: "cus_1234567890",
                    unsubscribe: true,
                    custom_fields: [
                        { name: "custom_field_name_3", value: "custom_field_value_3" },
                        { name: "custom_field_name_4", value: "custom_field_value_4" },
                    ],
                },
            ],
        };
        const rawResponseBody = { data: { subscription_update_id: "subscription_update_id" } };
        server
            .mockEndpoint()
            .patch("/publications/publicationId/subscriptions/bulk_actions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bulkSubscriptionUpdates.patch("publicationId", {
            subscriptions: [
                {
                    subscription_id: "sub_1234-5678-9012-3456-7890",
                    tier: "premium",
                    stripe_customer_id: "cus_1234567890",
                    unsubscribe: false,
                    custom_fields: [
                        {
                            name: "custom_field_name",
                            value: "custom_field_value",
                        },
                        {
                            name: "custom_field_name_2",
                            value: "custom_field_value_2",
                        },
                    ],
                },
                {
                    subscription_id: "sub_9876-5432-1098-7654-3210",
                    tier: "free",
                    stripe_customer_id: "cus_1234567890",
                    unsubscribe: true,
                    custom_fields: [
                        {
                            name: "custom_field_name_3",
                            value: "custom_field_value_3",
                        },
                        {
                            name: "custom_field_name_4",
                            value: "custom_field_value_4",
                        },
                    ],
                },
            ],
        });
        expect(response).toEqual({
            data: {
                subscription_update_id: "subscription_update_id",
            },
        });
    });

    test("put-status", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            subscription_ids: ["sub_1234-5678-9012-3456-7890", "sub_9876-5432-1098-7654-3210"],
            new_status: "active",
        };

        server
            .mockEndpoint()
            .put("/publications/publicationId/subscriptions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.bulkSubscriptionUpdates.putStatus("publicationId", {
            subscription_ids: ["sub_1234-5678-9012-3456-7890", "sub_9876-5432-1098-7654-3210"],
            new_status: "active",
        });
        expect(response).toEqual(undefined);
    });

    test("patch-status", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            subscription_ids: ["sub_1234-5678-9012-3456-7890", "sub_9876-5432-1098-7654-3210"],
            new_status: "active",
        };

        server
            .mockEndpoint()
            .patch("/publications/publicationId/subscriptions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.bulkSubscriptionUpdates.patchStatus("publicationId", {
            subscription_ids: ["sub_1234-5678-9012-3456-7890", "sub_9876-5432-1098-7654-3210"],
            new_status: "active",
        });
        expect(response).toEqual(undefined);
    });
});
