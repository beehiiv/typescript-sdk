/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BeehiivClient } from "../../src/Client";

describe("CustomFields", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { kind: "string", display: "Display" };
        const rawResponseBody = {
            data: {
                id: "00000000-0000-0000-0000-000000000000",
                kind: "string",
                display: "Display",
                created: 1672531200,
            },
        };
        server
            .mockEndpoint()
            .post("/publications/publicationId/custom_fields")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customFields.create("publicationId", {
            kind: "string",
            display: "Display",
        });
        expect(response).toEqual({
            data: {
                id: "00000000-0000-0000-0000-000000000000",
                kind: "string",
                display: "Display",
                created: 1672531200,
            },
        });
    });

    test("show", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "00000000-0000-0000-0000-000000000000",
                kind: "string",
                display: "Display",
                created: 1672531200,
            },
        };
        server
            .mockEndpoint()
            .get("/publications/publicationId/custom_fields/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customFields.show("publicationId", "id");
        expect(response).toEqual({
            data: {
                id: "00000000-0000-0000-0000-000000000000",
                kind: "string",
                display: "Display",
                created: 1672531200,
            },
        });
    });

    test("index", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                { id: "00000000-0000-0000-0000-000000000000", kind: "string", display: "Display", created: 1672531200 },
                { id: "00000000-0000-0000-0000-000000000000", kind: "string", display: "Display", created: 1672531200 },
            ],
            limit: 10,
            page: 1,
            total_results: 20,
            total_pages: 2,
        };
        server
            .mockEndpoint()
            .get("/publications/publicationId/custom_fields")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customFields.index("publicationId");
        expect(response).toEqual({
            data: [
                {
                    id: "00000000-0000-0000-0000-000000000000",
                    kind: "string",
                    display: "Display",
                    created: 1672531200,
                },
                {
                    id: "00000000-0000-0000-0000-000000000000",
                    kind: "string",
                    display: "Display",
                    created: 1672531200,
                },
            ],
            limit: 10,
            page: 1,
            total_results: 20,
            total_pages: 2,
        });
    });

    test("put", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { display: "New Display" };
        const rawResponseBody = { data: { id: "id", display: "display", kind: "string", created: 1672531200 } };
        server
            .mockEndpoint()
            .put("/publications/publicationId/custom_fields/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customFields.put("publicationId", "id", {
            display: "New Display",
        });
        expect(response).toEqual({
            data: {
                id: "id",
                display: "display",
                kind: "string",
                created: 1672531200,
            },
        });
    });

    test("patch", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { display: "New Display" };
        const rawResponseBody = { data: { id: "id", display: "display", kind: "string", created: 1672531200 } };
        server
            .mockEndpoint()
            .patch("/publications/publicationId/custom_fields/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customFields.patch("publicationId", "id", {
            display: "New Display",
        });
        expect(response).toEqual({
            data: {
                id: "id",
                display: "display",
                kind: "string",
                created: 1672531200,
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/publications/publicationId/custom_fields/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customFields.delete("publicationId", "id");
        expect(response).toEqual({});
    });
});
