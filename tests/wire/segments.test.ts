/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BeehiivClient } from "../../src/Client";

describe("Segments", () => {
    test("index", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "seg_00000000-0000-0000-0000-000000000000",
                    name: "name",
                    type: "dynamic",
                    last_calculated: 1666800076,
                    total_results: 15,
                    status: "pending",
                    active: true,
                    stats: {
                        open_rate: 0.5,
                        total_sent: 100,
                        percentage_premium_subscribers: 0.2,
                        percentage_subscribers_with_referrals: 0.1,
                        unique_emails_clicked: 10,
                        total_delivered: 100,
                        total_referrals: 10,
                        unsubscribed_rate: 0.05,
                        total_subscribers: 100,
                        clickthrough_rate: 0.5,
                        unsubscribed_count: 5,
                        unique_emails_opened: 10,
                        premium_subscribers: 20,
                        average_referrals_per_subscriber: 0.1,
                    },
                },
            ],
            limit: 1,
            page: 1,
            total_results: 1,
            total_pages: 1,
        };
        server
            .mockEndpoint()
            .get("/publications/pub_00000000-0000-0000-0000-000000000000/segments")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.segments.index("pub_00000000-0000-0000-0000-000000000000");
        expect(response).toEqual({
            data: [
                {
                    id: "seg_00000000-0000-0000-0000-000000000000",
                    name: "name",
                    type: "dynamic",
                    last_calculated: 1666800076,
                    total_results: 15,
                    status: "pending",
                    active: true,
                    stats: {
                        open_rate: 0.5,
                        total_sent: 100,
                        percentage_premium_subscribers: 0.2,
                        percentage_subscribers_with_referrals: 0.1,
                        unique_emails_clicked: 10,
                        total_delivered: 100,
                        total_referrals: 10,
                        unsubscribed_rate: 0.05,
                        total_subscribers: 100,
                        clickthrough_rate: 0.5,
                        unsubscribed_count: 5,
                        unique_emails_opened: 10,
                        premium_subscribers: 20,
                        average_referrals_per_subscriber: 0.1,
                    },
                },
            ],
            limit: 1,
            page: 1,
            total_results: 1,
            total_pages: 1,
        });
    });

    test("show", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "seg_00000000-0000-0000-0000-000000000000",
                name: "My Segment",
                type: "dynamic",
                last_calculated: 1666800076,
                total_results: 15,
                status: "completed",
                active: true,
                stats: {
                    open_rate: 0.5,
                    total_sent: 100,
                    percentage_premium_subscribers: 0.2,
                    percentage_subscribers_with_referrals: 0.1,
                    unique_emails_clicked: 10,
                    total_delivered: 100,
                    total_referrals: 10,
                    unsubscribed_rate: 0.05,
                    total_subscribers: 100,
                    clickthrough_rate: 0.5,
                    unsubscribed_count: 5,
                    unique_emails_opened: 10,
                    premium_subscribers: 20,
                    average_referrals_per_subscriber: 0.1,
                },
            },
        };
        server
            .mockEndpoint()
            .get(
                "/publications/pub_00000000-0000-0000-0000-000000000000/segments/seg_00000000-0000-0000-0000-000000000000",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.segments.show(
            "pub_00000000-0000-0000-0000-000000000000",
            "seg_00000000-0000-0000-0000-000000000000",
        );
        expect(response).toEqual({
            data: {
                id: "seg_00000000-0000-0000-0000-000000000000",
                name: "My Segment",
                type: "dynamic",
                last_calculated: 1666800076,
                total_results: 15,
                status: "completed",
                active: true,
                stats: {
                    open_rate: 0.5,
                    total_sent: 100,
                    percentage_premium_subscribers: 0.2,
                    percentage_subscribers_with_referrals: 0.1,
                    unique_emails_clicked: 10,
                    total_delivered: 100,
                    total_referrals: 10,
                    unsubscribed_rate: 0.05,
                    total_subscribers: 100,
                    clickthrough_rate: 0.5,
                    unsubscribed_count: 5,
                    unique_emails_opened: 10,
                    premium_subscribers: 20,
                    average_referrals_per_subscriber: 0.1,
                },
            },
        });
    });

    test("recalculate", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put(
                "/publications/pub_00000000-0000-0000-0000-000000000000/segments/seg_00000000-0000-0000-0000-000000000000/recalculate",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.segments.recalculate(
            "pub_00000000-0000-0000-0000-000000000000",
            "seg_00000000-0000-0000-0000-000000000000",
        );
        expect(response).toEqual({});
    });

    test("expand_results", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: ["sub_00000000-0000-0000-0000-000000000000", "sub_00000000-1111-1111-1111-111111111111"],
            limit: 1,
            page: 1,
            total_results: 1,
            total_pages: 1,
        };
        server
            .mockEndpoint()
            .get(
                "/publications/pub_00000000-0000-0000-0000-000000000000/segments/seg_00000000-0000-0000-0000-000000000000/results",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.segments.expandResults(
            "pub_00000000-0000-0000-0000-000000000000",
            "seg_00000000-0000-0000-0000-000000000000",
        );
        expect(response).toEqual({
            data: ["sub_00000000-0000-0000-0000-000000000000", "sub_00000000-1111-1111-1111-111111111111"],
            limit: 1,
            page: 1,
            total_results: 1,
            total_pages: 1,
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete(
                "/publications/pub_00000000-0000-0000-0000-000000000000/segments/seg_00000000-0000-0000-0000-000000000000",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.segments.delete(
            "pub_00000000-0000-0000-0000-000000000000",
            "seg_00000000-0000-0000-0000-000000000000",
        );
        expect(response).toEqual({});
    });
});
