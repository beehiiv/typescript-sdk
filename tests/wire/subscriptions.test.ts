/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BeehiivClient } from "../../src/Client";

describe("Subscriptions", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            email: "bruce.wayne@wayneenterprise.com",
            reactivate_existing: false,
            send_welcome_email: false,
            utm_source: "WayneEnterprise",
            utm_medium: "organic",
            utm_campaign: "fall_2022_promotion",
            referring_site: "www.wayneenterprise.com/blog",
            custom_fields: [
                { name: "First Name", value: "Bruce" },
                { name: "Last Name", value: "Wayne" },
            ],
            stripe_customer_id: "cus_12345abcde",
        };
        const rawResponseBody = {
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "validating",
                created: 1666800076,
                subscription_tier: "free",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
            },
        };
        server
            .mockEndpoint()
            .post("/publications/pub_00000000-0000-0000-0000-000000000000/subscriptions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.create("pub_00000000-0000-0000-0000-000000000000", {
            email: "bruce.wayne@wayneenterprise.com",
            reactivate_existing: false,
            send_welcome_email: false,
            utm_source: "WayneEnterprise",
            utm_medium: "organic",
            utm_campaign: "fall_2022_promotion",
            referring_site: "www.wayneenterprise.com/blog",
            custom_fields: [
                {
                    name: "First Name",
                    value: "Bruce",
                },
                {
                    name: "Last Name",
                    value: "Wayne",
                },
            ],
            stripe_customer_id: "cus_12345abcde",
        });
        expect(response).toEqual({
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "validating",
                created: 1666800076,
                subscription_tier: "free",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
            },
        });
    });

    test("index", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "sub_00000000-0000-0000-0000-000000000000",
                    email: "example@example.com",
                    status: "validating",
                    created: 1666800076,
                    subscription_tier: "free",
                    subscription_premium_tier_names: ["Premium", "Gold"],
                    utm_source: "Twitter",
                    utm_medium: "organic",
                    utm_channel: "website",
                    utm_campaign: "utm_campaign",
                    referring_site: "https://www.blog.com",
                    referral_code: "referral_code",
                    subscription_premium_tiers: [
                        { id: "tier_00000000-0000-0000-0000-000000000000", name: "name", status: "active" },
                    ],
                    custom_fields: [{}],
                    tags: ["Premium", "Basic", "Active", "Engaged"],
                    stats: { emails_received: 25, open_rate: 60.1, click_through_rate: 25 },
                },
            ],
            limit: 10,
            has_more: true,
            next_cursor: "eyJ0aW1lc3RhbXAiOiIyMDI0LTA3LTAyVDE3OjMwOjAwLjAwMDAwMFoifQ==",
        };
        server
            .mockEndpoint()
            .get("/publications/pub_00000000-0000-0000-0000-000000000000/subscriptions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.index("pub_00000000-0000-0000-0000-000000000000", {
            limit: 10,
        });
        expect(response).toEqual({
            data: [
                {
                    id: "sub_00000000-0000-0000-0000-000000000000",
                    email: "example@example.com",
                    status: "validating",
                    created: 1666800076,
                    subscription_tier: "free",
                    subscription_premium_tier_names: ["Premium", "Gold"],
                    utm_source: "Twitter",
                    utm_medium: "organic",
                    utm_channel: "website",
                    utm_campaign: "utm_campaign",
                    referring_site: "https://www.blog.com",
                    referral_code: "referral_code",
                    subscription_premium_tiers: [
                        {
                            id: "tier_00000000-0000-0000-0000-000000000000",
                            name: "name",
                            status: "active",
                        },
                    ],
                    custom_fields: [{}],
                    tags: ["Premium", "Basic", "Active", "Engaged"],
                    stats: {
                        emails_received: 25,
                        open_rate: 60.1,
                        click_through_rate: 25,
                    },
                },
            ],
            limit: 10,
            has_more: true,
            next_cursor: "eyJ0aW1lc3RhbXAiOiIyMDI0LTA3LTAyVDE3OjMwOjAwLjAwMDAwMFoifQ==",
        });
    });

    test("get-by-email", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "validating",
                created: 1666800076,
                subscription_tier: "free",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
                subscription_premium_tiers: [
                    { id: "tier_00000000-0000-0000-0000-000000000000", name: "name", status: "active" },
                ],
                custom_fields: [{}],
                tags: ["Premium", "Basic", "Active", "Engaged"],
                stats: { emails_received: 25, open_rate: 60.1, click_through_rate: 25 },
            },
        };
        server
            .mockEndpoint()
            .get("/publications/pub_00000000-0000-0000-0000-000000000000/subscriptions/by_email/work%40example.com")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.getByEmail(
            "pub_00000000-0000-0000-0000-000000000000",
            "work@example.com",
        );
        expect(response).toEqual({
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "validating",
                created: 1666800076,
                subscription_tier: "free",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
                subscription_premium_tiers: [
                    {
                        id: "tier_00000000-0000-0000-0000-000000000000",
                        name: "name",
                        status: "active",
                    },
                ],
                custom_fields: [{}],
                tags: ["Premium", "Basic", "Active", "Engaged"],
                stats: {
                    emails_received: 25,
                    open_rate: 60.1,
                    click_through_rate: 25,
                },
            },
        });
    });

    test("get-by-id", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "validating",
                created: 1666800076,
                subscription_tier: "free",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
            },
        };
        server
            .mockEndpoint()
            .get(
                "/publications/pub_00000000-0000-0000-0000-000000000000/subscriptions/sub_00000000-0000-0000-0000-000000000000",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.getById(
            "pub_00000000-0000-0000-0000-000000000000",
            "sub_00000000-0000-0000-0000-000000000000",
        );
        expect(response).toEqual({
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "validating",
                created: 1666800076,
                subscription_tier: "free",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
            },
        });
    });

    test("get-by-subscriber-id", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "validating",
                created: 1666800076,
                subscription_tier: "free",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
            },
        };
        server
            .mockEndpoint()
            .get(
                "/publications/pub_00000000-0000-0000-0000-000000000000/subscriptions/by_subscriber_id/00000000-0000-0000-0000-000000000000",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.getBySubscriberId(
            "pub_00000000-0000-0000-0000-000000000000",
            "00000000-0000-0000-0000-000000000000",
        );
        expect(response).toEqual({
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "validating",
                created: 1666800076,
                subscription_tier: "free",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
            },
        });
    });

    test("get-jwt_token", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { jwt_token: "01234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" },
        };
        server
            .mockEndpoint()
            .get(
                "/publications/pub_00000000-0000-0000-0000-000000000000/subscriptions/sub_00000000-0000-0000-0000-000000000000/jwt_token",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.getJwtToken(
            "pub_00000000-0000-0000-0000-000000000000",
            "sub_00000000-0000-0000-0000-000000000000",
        );
        expect(response).toEqual({
            data: {
                jwt_token: "01234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
            },
        });
    });

    test("put", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            tier: "premium",
            stripe_customer_id: "cus_12345abcde",
            custom_fields: [
                { name: "First Name", value: "Bruce" },
                { name: "Last Name", value: "Wayne" },
            ],
        };
        const rawResponseBody = {
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "active",
                created: 1666800076,
                subscription_tier: "premium",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
            },
        };
        server
            .mockEndpoint()
            .put(
                "/publications/pub_00000000-0000-0000-0000-000000000000/subscriptions/sub_00000000-0000-0000-0000-000000000000",
            )
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.put(
            "pub_00000000-0000-0000-0000-000000000000",
            "sub_00000000-0000-0000-0000-000000000000",
            {
                tier: "premium",
                stripe_customer_id: "cus_12345abcde",
                custom_fields: [
                    {
                        name: "First Name",
                        value: "Bruce",
                    },
                    {
                        name: "Last Name",
                        value: "Wayne",
                    },
                ],
            },
        );
        expect(response).toEqual({
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "active",
                created: 1666800076,
                subscription_tier: "premium",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
            },
        });
    });

    test("patch", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            tier: "premium",
            stripe_customer_id: "cus_12345abcde",
            custom_fields: [
                { name: "First Name", value: "Bruce" },
                { name: "Last Name", value: "Wayne" },
            ],
        };
        const rawResponseBody = {
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "active",
                created: 1666800076,
                subscription_tier: "premium",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
            },
        };
        server
            .mockEndpoint()
            .patch(
                "/publications/pub_00000000-0000-0000-0000-000000000000/subscriptions/sub_00000000-0000-0000-0000-000000000000",
            )
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.patch(
            "pub_00000000-0000-0000-0000-000000000000",
            "sub_00000000-0000-0000-0000-000000000000",
            {
                tier: "premium",
                stripe_customer_id: "cus_12345abcde",
                custom_fields: [
                    {
                        name: "First Name",
                        value: "Bruce",
                    },
                    {
                        name: "Last Name",
                        value: "Wayne",
                    },
                ],
            },
        );
        expect(response).toEqual({
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "active",
                created: 1666800076,
                subscription_tier: "premium",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
            },
        });
    });

    test("update-by-email", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            tier: "premium",
            stripe_customer_id: "cus_12345abcde",
            custom_fields: [
                { name: "First Name", value: "Bruce" },
                { name: "Last Name", value: "Wayne" },
            ],
        };
        const rawResponseBody = {
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "active",
                created: 1666800076,
                subscription_tier: "premium",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
            },
        };
        server
            .mockEndpoint()
            .put("/publications/pub_00000000-0000-0000-0000-000000000000/subscriptions/by_email/example%40example.com")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.updateByEmail(
            "pub_00000000-0000-0000-0000-000000000000",
            "example@example.com",
            {
                tier: "premium",
                stripe_customer_id: "cus_12345abcde",
                custom_fields: [
                    {
                        name: "First Name",
                        value: "Bruce",
                    },
                    {
                        name: "Last Name",
                        value: "Wayne",
                    },
                ],
            },
        );
        expect(response).toEqual({
            data: {
                id: "sub_00000000-0000-0000-0000-000000000000",
                email: "example@example.com",
                status: "active",
                created: 1666800076,
                subscription_tier: "premium",
                subscription_premium_tier_names: ["Premium", "Gold"],
                utm_source: "Twitter",
                utm_medium: "organic",
                utm_channel: "website",
                utm_campaign: "utm_campaign",
                referring_site: "https://www.blog.com",
                referral_code: "referral_code",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete(
                "/publications/pub_00000000-0000-0000-0000-000000000000/subscriptions/sub_00000000-0000-0000-0000-000000000000",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscriptions.delete(
            "sub_00000000-0000-0000-0000-000000000000",
            "pub_00000000-0000-0000-0000-000000000000",
        );
        expect(response).toEqual({});
    });
});
