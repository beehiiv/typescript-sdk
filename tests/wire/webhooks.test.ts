/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BeehiivClient } from "../../src/Client";

describe("Webhooks", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { url: "https://example.com/webhook", event_types: ["post.sent"] };
        const rawResponseBody = {
            data: {
                id: "ep_0ca1a8505a64924059c391744d0",
                url: "https://example.com/webhook",
                created: 1666800076,
                updated: 1666800076,
                event_types: ["post.sent", "subscription.confirmed"],
                description: "A webhook to receive new posts data and new subscription confirmations.",
            },
        };
        server
            .mockEndpoint()
            .post("/publications/pub_00000000-0000-0000-0000-000000000000/webhooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.create("pub_00000000-0000-0000-0000-000000000000", {
            url: "https://example.com/webhook",
            event_types: ["post.sent"],
        });
        expect(response).toEqual({
            data: {
                id: "ep_0ca1a8505a64924059c391744d0",
                url: "https://example.com/webhook",
                created: 1666800076,
                updated: 1666800076,
                event_types: ["post.sent", "subscription.confirmed"],
                description: "A webhook to receive new posts data and new subscription confirmations.",
            },
        });
    });

    test("index", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "ep_0ca1a8505a64924059c391744d0",
                    url: "https://example.com/webhook",
                    created: 1666800076,
                    updated: 1666800076,
                    event_types: ["post.sent", "subscription.confirmed"],
                    description: "A webhook to receive new posts data and new subscription confirmations.",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/publications/pub_00000000-0000-0000-0000-000000000000/webhooks")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.index("pub_00000000-0000-0000-0000-000000000000");
        expect(response).toEqual({
            data: [
                {
                    id: "ep_0ca1a8505a64924059c391744d0",
                    url: "https://example.com/webhook",
                    created: 1666800076,
                    updated: 1666800076,
                    event_types: ["post.sent", "subscription.confirmed"],
                    description: "A webhook to receive new posts data and new subscription confirmations.",
                },
            ],
        });
    });

    test("show", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "ep_0ca1a8505a64924059c391744d0",
                url: "https://example.com/webhook",
                created: 1666800076,
                updated: 1666800076,
                event_types: ["post.sent", "subscription.confirmed"],
                description: "A webhook to receive new posts data and new subscription confirmations.",
            },
        };
        server
            .mockEndpoint()
            .get("/publications/pub_00000000-0000-0000-0000-000000000000/webhooks/ep_0000000000000000000000000000")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.show(
            "pub_00000000-0000-0000-0000-000000000000",
            "ep_0000000000000000000000000000",
        );
        expect(response).toEqual({
            data: {
                id: "ep_0ca1a8505a64924059c391744d0",
                url: "https://example.com/webhook",
                created: 1666800076,
                updated: 1666800076,
                event_types: ["post.sent", "subscription.confirmed"],
                description: "A webhook to receive new posts data and new subscription confirmations.",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/publications/pub_00000000-0000-0000-0000-000000000000/webhooks/ep_0000000000000000000000000000")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.delete(
            "pub_00000000-0000-0000-0000-000000000000",
            "ep_0000000000000000000000000000",
        );
        expect(response).toEqual({});
    });

    test("test", async () => {
        const server = mockServerPool.createServer();
        const client = new BeehiivClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { key: "value" },
            event_timestamp: 1666800076,
            event_type: "post.sent",
            uid: "test_00000000-0000-0000-0000-000000000000",
        };
        server
            .mockEndpoint()
            .get(
                "/publications/pub_00000000-0000-0000-0000-000000000000/webhooks/ep_0000000000000000000000000000/tests",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.test(
            "pub_00000000-0000-0000-0000-000000000000",
            "ep_0000000000000000000000000000",
        );
        expect(response).toEqual({
            data: {
                key: "value",
            },
            event_timestamp: 1666800076,
            event_type: "post.sent",
            uid: "test_00000000-0000-0000-0000-000000000000",
        });
    });
});
